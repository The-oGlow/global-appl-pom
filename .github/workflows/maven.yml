name: maven-build

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - develop
    paths-ignore:
      - '.github/**'
      - '.run/**'
      - '.m2/**'
      - '.repo/**'
  pull_request:
    branches:
      - master

env:
  # Github Additional Configuration
  GITHUB_REPO_NAME: ${{ github.event.repository.name }}
  GITHUB_PROJECT_DIR: ${{ github.workspace }}
  GITHUB_TARGET_DIR: ${{ github.workspace }}/target
  GITHUB_UPLOAD_DIR: ${{ github.workspace }}/staging

  # Maven Common Configuration
  MVN_HOME_DIR: ~/.m2
  MVN_REPO_JOB_DIR: ${{ github.workspace }}/.repo
  MVN_SETT_OPTS: -B -s "${{ github.workspace}}/.m2/settings.xml"
  MVN_REPO_OPTS: -Dmaven.repo.local="${{ github.workspace}}/.repo"
  MVN_BUILD_OPTS: -fae -Dmaven.test.failure.ignore=true
  MVN_CLI_OPTS: -fae

  # Maven Sign Configuration
  MVN_SIGN_OPTS: -P!generate-gpgkey -P!sign-jar

  # Maven Test Configuration
  MVN_TEST_OPTS_N: -DskipTests=true -DskipITs=true
  MVN_TEST_OPTS_Y: -DskipTests=false -DskipITs=false

  # Sonarcloud Configuration
  MVN_SONAR_OPTS: -Dsonar.qualitygate.wait=true -Dsonar.login=${{ secrets.SONAR_TOKEN }}
  SONAR_CACHE_DIR: ~/.sonar/cache
  SONAR_HOST_URL: "https://sonarcloud.io"

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
        version: [11]
        distribution: [adopt]
    runs-on: ${{ matrix.os }}

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: show env
        run: |
          echo "**** show_env ****"
          printenv | sort

      - name: setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '${{ matrix.version }}'
          distribution: '${{ matrix.distribution }}'
          architecture: x64

      - name: cache maven packages
        uses: actions/cache@v3
        with:
          path: ${{ env.MVN_HOME_DIR }}
          key: ${{ matrix.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ matrix.os }}-m2

      - name: maven settings
        uses: s4u/maven-settings-action@v2.6.0
        with:
          servers: '[{ "id": "coding.github-ss",  "username": "ollily", "configuration": { "httpHeaders": { "property": { "name": "Authorization", "value": "Bearer ${{ secrets.PCK_READ_TOKEN }}" }}}}, { "id": "coding.github.deploy-ss",  "username": "ollily", "configuration": { "httpHeaders": { "property": { "name": "Authorization", "value": "Bearer ${{ secrets.PCK_WRITE_TOKEN }}" }}}}]' 

      - name: settings
        run: cat ${{ env.MVN_HOME_DIR }}/settings.xml

      - name: maven build
        run: mvn ${{ env.MVN_SIGN_OPTS }} ${{ env.MVN_TEST_OPTS_N }} ${{ env.MVN_BUILD_OPTS }} clean install

      - name: show build
        run: |
          echo "**** show_build ****"
          find "${{ env.GITHUB_PROJECT_DIR }}" -type d ! -regex ".+\.repo.*" ! -regex ".+\.git.*" ! -regex ".+\.sonar.*" -print

      - name: prepare upload
        env:
          PU_JAR: ${{ env.GITHUB_TARGET_DIR }}/*.jar
          PU_POM: ${{ env.GITHUB_PROJECT_DIR }}/pom.xml
        run: |
          mkdir "${{ env.GITHUB_UPLOAD_DIR }}"
          ls -la "${{ env.GITHUB_PROJECT_DIR }}"
          ls -la "${{ env.GITHUB_TARGET_DIR }}"
          test -f "${{ env.PU_JAR }}" && cp -v "${{ env.PU_JAR }}" "${{ env.GITHUB_UPLOAD_DIR }}"
          test -f "${{ env.PU_POM }}" && cp -v "${{ env.PU_POM }}" "${{ env.GITHUB_UPLOAD_DIR }}"

      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.GITHUB_REPO_NAME }}
          path: ${{ env.GITHUB_UPLOAD_DIR }}
          if-no-files-found: warn

      - name: deploy artifact
        run: mvn ${{ env.MVN_SIGN_OPTS }} ${{ env.MVN_TEST_OPTS_N }} ${{ env.MVN_BUILD_OPTS }} deploy

